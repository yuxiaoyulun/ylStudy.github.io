(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{485:function(e,t,a){"use strict";a.r(t);var n=a(65),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[e._v("#")]),e._v(" Rebase")]),e._v(" "),a("p",[e._v("在上一节我们看到了，多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。")]),e._v(" "),a("p",[e._v("每次合并再push后，分支变成了这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git log --graph --pretty=oneline --abbrev-commit\n* d1be385 (HEAD -> master, origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n| |/  \n* |   12a631b merged bug fix 101\n|\\ \\  \n| * | 4c805e2 fix bug 101\n|/ /  \n* |   e1e9c68 merge with no-ff\n|\\ \\  \n| |/  \n| * f52c633 add merge\n|/  \n*   cf810e4 conflict fixed\n")])])]),a("p",[e._v("总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？")]),e._v(" "),a("p",[e._v("其实是可以做到的！")]),e._v(" "),a("p",[e._v("在和远程分支同步后，我们对hello.py这个文件做了两次提交。用git log命令看看：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git log --graph --pretty=oneline --abbrev-commit\n* 582d922 (HEAD -> master) add author\n* 8875536 add comment\n* d1be385 (origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n...\n")])])]),a("p",[e._v("注意到Git用(HEAD -> master)和(origin/master)标识出当前分支的HEAD和远程origin的位置分别是582d922 add author和d1be385 init hello，本地分支比远程分支快两个提交。")]),e._v(" "),a("p",[e._v("现在我们尝试推送本地分支：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git push origin master\nTo github.com:michaelliao/learngit.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n")])])]),a("p",[e._v("很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git pull\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom github.com:michaelliao/learngit\n   d1be385..f005ed4  master     -> origin/master\n * [new tag]         v1.0       -> v1.0\nAuto-merging hello.py\nMerge made by the 'recursive' strategy.\n hello.py | 1 +\n 1 file changed, 1 insertion(+)\n")])])]),a("p",[e._v("再用"),a("code",[e._v("git status")]),e._v("看看状态：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n")])])]),a("p",[e._v("加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。")]),e._v(" "),a("p",[e._v("用git log看看：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git log --graph --pretty=oneline --abbrev-commit\n*   e0ea545 (HEAD -> master) Merge branch 'master' of github.com:michaelliao/learngit\n|\\  \n| * f005ed4 (origin/master) set exit=1\n* | 582d922 add author\n* | 8875536 add comment\n|/  \n* d1be385 init hello\n...\n")])])]),a("p",[e._v("对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。")]),e._v(" "),a("p",[e._v("这个时候，rebase就派上了用场。我们输入命令git rebase试试：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: add comment\nUsing index info to reconstruct a base tree...\nM\thello.py\nFalling back to patching base and 3-way merge...\nAuto-merging hello.py\nApplying: add author\nUsing index info to reconstruct a base tree...\nM\thello.py\nFalling back to patching base and 3-way merge...\nAuto-merging hello.py\n")])])]),a("p",[e._v("输出了一大堆操作，到底是啥效果？再用git log看看：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git log --graph --pretty=oneline --abbrev-commit\n* 7e61ed4 (HEAD -> master) add author\n* 3611cfe add comment\n* f005ed4 (origin/master) set exit=1\n* d1be385 init hello\n...\n")])])]),a("p",[e._v("原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了f005ed4 (origin/master) set exit=1之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于d1be385 init hello，而是基于f005ed4 (origin/master) set exit=1，但最后的提交7e61ed4内容是一致的。")]),e._v(" "),a("p",[e._v("这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。")]),e._v(" "),a("p",[e._v("最后，通过push操作把本地分支推送到远程：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Mac:~/learngit michael$ git push origin master\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.\nTotal 6 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 1 local object.\nTo github.com:michaelliao/learngit.git\n   f005ed4..7e61ed4  master -> master\n")])])]),a("p",[e._v("再用"),a("code",[e._v("git log")]),e._v("看看效果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git log --graph --pretty=oneline --abbrev-commit\n* 7e61ed4 (HEAD -> master, origin/master) add author\n* 3611cfe add comment\n* f005ed4 set exit=1\n* d1be385 init hello\n...\n")])])]),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("ul",[a("li",[e._v("rebase操作可以把本地未push的分叉提交历史整理成直线；")]),e._v(" "),a("li",[e._v("rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。")])]),e._v(" "),a("p",[e._v("下一节"),a("RouterLink",{attrs:{to:"/pages/git/test20.html"}},[e._v("管理标签")])],1)])}),[],!1,null,null,null);t.default=s.exports}}]);