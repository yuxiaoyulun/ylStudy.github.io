(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{494:function(t,s,a){"use strict";a.r(s);var e=a(65),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"搭建git服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建git服务器"}},[t._v("#")]),t._v(" 搭建Git服务器")]),t._v(" "),a("p",[t._v("在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。")]),t._v(" "),a("p",[t._v("GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。")]),t._v(" "),a("p",[t._v("搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。")]),t._v(" "),a("p",[t._v("假设你已经有sudo权限的用户账号，下面，正式开始安装。")]),t._v(" "),a("p",[t._v("第一步，安装git：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ sudo apt-get install git\n")])])]),a("p",[t._v("第二步，创建一个git用户，用来运行git服务：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ sudo adduser git\n")])])]),a("p",[t._v("第三步，创建证书登录：")]),t._v(" "),a("p",[t._v("收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。")]),t._v(" "),a("p",[t._v("第四步，初始化Git仓库：")]),t._v(" "),a("p",[t._v("先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ sudo git init --bare sample.git\n")])])]),a("p",[t._v("Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ sudo chown -R git:git sample.git\n")])])]),a("p",[t._v("第五步，禁用shell登录：\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git:x:1001:1001:,,,:/home/git:/bin/bash\n")])])]),a("p",[t._v("改为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n")])])]),a("p",[t._v("这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。")]),t._v(" "),a("p",[t._v("第六步，克隆远程仓库：")]),t._v(" "),a("p",[t._v("现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git clone git@server:/srv/sample.git\nCloning into 'sample'...\nwarning: You appear to have cloned an empty repository.\n")])])]),a("p",[t._v("剩下的推送就简单了。")]),t._v(" "),a("h2",{attrs:{id:"管理公钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理公钥"}},[t._v("#")]),t._v(" 管理公钥")]),t._v(" "),a("p",[t._v("如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。")]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("ul",[a("li",[t._v("搭建Git服务器非常简单，通常10分钟即可完成；")]),t._v(" "),a("li",[t._v("要方便管理公钥，用Gitosis；")]),t._v(" "),a("li",[t._v("要像SVN那样变态地控制权限，用Gitolite。")])]),t._v(" "),a("p",[t._v("下一节"),a("RouterLink",{attrs:{to:"/pages/git/test29.html"}},[t._v("使用SourceTree")])],1)])}),[],!1,null,null,null);s.default=i.exports}}]);