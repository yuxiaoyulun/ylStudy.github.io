(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{484:function(t,e,a){"use strict";a.r(e);var s=a(65),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分支管理策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),a("p",[t._v("通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。")]),t._v(" "),a("p",[t._v("如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。")]),t._v(" "),a("p",[t._v("下面我们实战一下"),a("code",[t._v("--no-ff")]),t._v("方式的git merge：")]),t._v(" "),a("p",[t._v("首先，仍然创建并切换dev分支：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git switch -c dev\nSwitched to a new branch 'dev'\n")])])]),a("p",[t._v("修改readme.txt文件，并提交一个新的commit：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git add readme.txt \n$ git commit -m "add merge"\n[dev f52c633] add merge\n 1 file changed, 1 insertion(+)\n')])])]),a("p",[t._v("现在，我们切换回master：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git switch master\nSwitched to branch 'master'\n")])])]),a("p",[t._v("准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git merge --no-ff -m \"merge with no-ff\" dev\nMerge made by the 'recursive' strategy.\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n")])])]),a("p",[t._v("因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。")]),t._v(" "),a("p",[t._v("合并后，我们用git log看看分支历史：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git log --graph --pretty=oneline --abbrev-commit\n*   e1e9c68 (HEAD -> master) merge with no-ff\n|\\  \n| * f52c633 (dev) add merge\n|/  \n*   cf810e4 conflict fixed\n...\n")])])]),a("h3",{attrs:{id:"分支策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支策略"}},[t._v("#")]),t._v(" 分支策略")]),t._v(" "),a("p",[t._v("在实际开发中，我们应该按照几个基本原则进行分支管理：")]),t._v(" "),a("p",[t._v("首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；")]),t._v(" "),a("p",[t._v("干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；")]),t._v(" "),a("p",[t._v("你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。")]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。")]),t._v(" "),a("p",[t._v("下一节"),a("RouterLink",{attrs:{to:"/pages/git/test16.html"}},[t._v("Bug分支")])],1)])}),[],!1,null,null,null);e.default=r.exports}}]);