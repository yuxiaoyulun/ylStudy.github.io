(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{480:function(e,t,a){"use strict";a.r(t);var s=a(65),v=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"创建与合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支"}},[e._v("#")]),e._v(" 创建与合并分支")]),e._v(" "),a("p",[e._v("在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。")]),e._v(" "),a("p",[e._v("一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：")]),e._v(" "),a("p",[e._v("每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。")]),e._v(" "),a("p",[e._v("当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：")]),e._v(" "),a("p",[e._v("从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：")]),e._v(" "),a("p",[e._v("假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：")]),e._v(" "),a("p",[e._v("合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：")]),e._v(" "),a("p",[e._v("首先，我们创建dev分支，然后切换到dev分支：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git checkout -b dev\nSwitched to a new branch 'dev'\n")])])]),a("p",[a("code",[e._v("git checkout")]),e._v("命令加上"),a("code",[e._v("-b")]),e._v("参数表示创建并切换，相当于以下两条命令：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git branch dev\n$ git checkout dev\nSwitched to branch 'dev'\n")])])]),a("p",[e._v("然后，用"),a("code",[e._v("git branch")]),e._v("命令查看当前分支：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git branch\n* dev\n  master\n")])])]),a("p",[a("code",[e._v("git branch")]),e._v("命令会列出所有分支，当前分支前面会标一个"),a("code",[e._v("*")]),e._v("号。\n然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Creating a new branch is quick.\n")])])]),a("p",[e._v("然后提交：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ git add readme.txt \n$ git commit -m "branch test"\n[dev b17d20e] branch test\n 1 file changed, 1 insertion(+)\n')])])]),a("p",[e._v("现在，dev分支的工作完成，我们就可以切换回master分支：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git checkout master\nSwitched to branch 'master'\n")])])]),a("p",[e._v("切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：")]),e._v(" "),a("p",[e._v("现在，我们把dev分支的工作成果合并到master分支上：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git merge dev\nUpdating d46f35e..b17d20e\nFast-forward\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n")])])]),a("p",[a("code",[e._v("git merge")]),e._v("命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。")]),e._v(" "),a("p",[e._v("合并完成后，就可以放心地删除dev分支了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git branch -d dev\nDeleted branch dev (was b17d20e).\n")])])]),a("p",[e._v("删除后，查看branch，就只剩下master分支了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git branch\n* master\n")])])]),a("h3",{attrs:{id:"switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[e._v("#")]),e._v(" switch")]),e._v(" "),a("p",[e._v("我们注意到切换分支使用"),a("code",[e._v("git checkout <branch>")]),e._v("，而前面讲过的撤销修改则是"),a("code",[e._v("git checkout -- <file>")]),e._v("，同一个命令，有两种作用，确实有点令人迷惑。")]),e._v(" "),a("p",[e._v("实际上，切换分支这个动作，用switch更科学。因此，最新版本的Git提供了新的git switch命令来切换分支：")]),e._v(" "),a("p",[e._v("创建并切换到新的dev分支，可以使用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git switch -c dev\n")])])]),a("p",[e._v("直接切换到已有的master分支，可以使用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git switch master\n")])])]),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("ul",[a("li",[e._v("Git鼓励大量使用分支：")]),e._v(" "),a("li",[e._v("查看分支："),a("code",[e._v("git branch")])]),e._v(" "),a("li",[e._v("创建分支："),a("code",[e._v("git branch <name>")])]),e._v(" "),a("li",[e._v("切换分支："),a("code",[e._v("git checkout <name>")]),e._v("或者"),a("code",[e._v("git switch <name>")])]),e._v(" "),a("li",[e._v("创建+切换分支："),a("code",[e._v("git checkout -b <name>")]),e._v("或者"),a("code",[e._v("git switch -c <name>")])]),e._v(" "),a("li",[e._v("合并某分支到当前分支："),a("code",[e._v("git merge <name>")])]),e._v(" "),a("li",[e._v("删除分支："),a("code",[e._v("git branch -d <name>")])])]),e._v(" "),a("p",[e._v("下一节"),a("RouterLink",{attrs:{to:"/pages/git/test14.html"}},[e._v("解决冲突")])],1)])}),[],!1,null,null,null);t.default=v.exports}}]);